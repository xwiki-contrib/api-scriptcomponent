/*
 * See the NOTICE file distributed with this work for additional
 * information regarding copyright ownership.
 *
 * This is free software; you can redistribute it and/or modify it
 * under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation; either version 2.1 of
 * the License, or (at your option) any later version.
 *
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this software; if not, write to the Free
 * Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA
 * 02110-1301 USA, or see the FSF site: http://www.fsf.org.
 */
package org.xwiki.contrib.scriptcomponent.internal;

import java.io.Reader;
import java.io.StringWriter;
import java.io.Writer;

import javax.inject.Inject;
import javax.inject.Named;
import javax.inject.Singleton;
import javax.script.ScriptContext;
import javax.script.ScriptEngine;
import javax.script.ScriptEngineManager;

import org.xwiki.component.annotation.Component;
import org.xwiki.component.manager.ComponentManager;
import org.xwiki.component.wiki.WikiComponentException;
import org.xwiki.script.ScriptContextManager;
import org.xwiki.security.authorization.AuthorExecutor;

import com.xpn.xwiki.doc.XWikiDocument;

/**
 * Execute and generate a Java {@link Class} from a script.
 * 
 * @version $Id$
 */
@Component(roles = ScriptComponentExecutor.class)
@Singleton
public class ScriptComponentExecutor
{
    @Inject
    private AuthorExecutor executor;

    @Inject
    private ScriptContextManager scriptContextManager;

    @Inject
    @Named("root")
    private ComponentManager rootComponentManager;

    private ScriptEngineManager scriptEngineManager = new ScriptEngineManager();

    /**
     * Execute and generate a Java {@link Class} from a script.
     * 
     * @param language the language of the script
     * @param script the content of the script
     * @param componentDocument the document containing the the script component
     * @return the Java {@link Class} generated by the script
     * @throws WikiComponentException when failing to get a Java {@link Class} from a script
     */
    public Class<?> getClass(String language, String script, XWikiDocument componentDocument)
        throws WikiComponentException
    {
        try {
            return this.executor.call(() -> getClass(language, script), componentDocument.getAuthorReference());
        } catch (Exception e) {
            throw new WikiComponentException("Failed to get component class", e);
        }
    }

    private Class<?> getClass(String language, String script) throws Exception
    {
        ScriptEngine engine = this.scriptEngineManager.getEngineByName(language);

        if (engine == null) {
            throw new WikiComponentException("Can't find script engine with name [" + language + "]");
        }

        ScriptContext scriptContext = this.scriptContextManager.getScriptContext();

        Writer currentWriter = scriptContext.getWriter();
        Reader currentReader = scriptContext.getReader();

        try {
            StringWriter stringWriter = new StringWriter();

            // set writer in script context
            scriptContext.setWriter(stringWriter);

            Object scriptResult = engine.eval(script, scriptContext);

            if (scriptResult instanceof Class) {
                return (Class) scriptResult;
            } else {
                throw new WikiComponentException("Unkown return [" + script + "]");
            }
        } finally {
            // restore current writer
            scriptContext.setWriter(currentWriter);
            // restore current reader
            scriptContext.setReader(currentReader);
        }
    }
}
